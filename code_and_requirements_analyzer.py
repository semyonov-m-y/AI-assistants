import os
import logging
import time
import requests
import re
import html
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from langchain_gigachat.chat_models import GigaChat
from _config import TOKEN, credentials

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
gigachat_model = GigaChat(
    credentials=credentials,
    verify_ssl_certs=False,
    timeout=360,
    temperature=0.18,
    top_p=0.3,
    model="GigaChat-2-Max"
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
thread_id = random.randint(1, 1000)
config_ = {"configurable": {"thread_id": f'{thread_id}'}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class BotState(StatesGroup):
    active_session = State()

def get_main_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_session")],
            [InlineKeyboardButton(text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_session")]
        ]
    )

def get_session_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="stop_session")]
        ]
    )

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_msg = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∫–æ–¥–∞!</b>

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚úÖ –ê–Ω–∞–ª–∏–∑–æ–º –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

–†–∞–±–æ—Ç–∞—é —Å:
üîó –°—Å—ã–ª–∫–∞–º–∏ –Ω–∞ Confluence
üìù –ü—Ä—è–º—ã–º –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
    """
    await message.answer(welcome_msg, reply_markup=get_main_keyboard())

@dp.message(Command("help"))
async def help_handler(message: Message):
    help_msg = """
üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>

–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
1. –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å-—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:
   - –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
   - –î–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
   - –ü—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è

2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º

3. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤

5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Confluence

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/stop - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:
- –¢–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∫–æ–¥–∞
- –ò–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence
    """
    await message.answer(help_msg)

@dp.callback_query(lambda c: c.data == "start_session")
async def start_session(callback: CallbackQuery, state: FSMContext):
    init_msg = """
üîç <b>–°–µ—Å—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∫–æ–¥–∞
2. –ü—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ Confluence
3. –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∞–Ω–∞–ª–∏–∑—É

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:
"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: <—Ç–µ–∫—Å—Ç>"
"–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç—Ç–æ–≥–æ –∫–æ–¥–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: <–∫–æ–¥>"
    """
    await callback.message.answer(init_msg, reply_markup=get_session_keyboard())
    await state.set_state(BotState.active_session)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stop_session")
async def stop_session(callback: CallbackQuery, state: FSMContext):
    global config_
    thread_id = random.randint(1, 1000)
    config_ = {"configurable": {"thread_id": f'{thread_id}'}}
    
    await callback.message.answer("üõë <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b> –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
    await state.clear()
    await callback.answer()

@dp.message(BotState.active_session)
async def process_message(message: Message):
    try:
        user_text = message.text
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
        quick_response = gigachat_model.invoke([
            SystemMessage(content="–î–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, —á—Ç–æ –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞"),
            HumanMessage(content=user_text)
        ])
        
        await message.answer(f"üîé <i>{quick_response.content}</i>")
        
        # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ
        full_response = graph.invoke({"messages": user_text}, config=config_)
        response_content = full_response["messages"][-1].content
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
        if len(response_content) > 4000:
            with open('response.txt', 'w', encoding="utf-8") as f:
                f.write(response_content)
            await message.answer_document(
                document=FSInputFile('response.txt'),
                caption="üìÑ –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:"
            )
        else:
            await message.answer(f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</b>\n\n{response_content}")
            
    except Exception as e:
        logging.error(f"Error processing message: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–µ—Å—Å–∏—é /stop")

async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())